函数基础
1.函数定义
编程函数：
非数学函数；和变量和列表类似，储存功能，也叫高级变量


2.函数的优点：
1.多个常用代码，可以存起来，以后直接调用（同一文件路径）
2.规范代码的编写（重复度高的代码统一保存（封装））
3.后期统一修改或维护程序


2.2函数命名
命名方法：
1.符合标识符
2.命名: 小驼峰法      关键字：  def
格式：
def  函数名():
    代码块

函数名()# 调用: 运行里的代码

例：
def func():# func/function 常用于函数名
    print("这里使用一个函数名  ")

func()
func()
func()# 分别调用三次


3.定义空函数
def func():
    # 就是不能占着茅坑不拉屎
    pass
func()


4.返回值
return - 意思就是返回结果
不写不代表没有返回值
特征:
返回的数值类型：全部的类型
返回值只有一个结果

def func():
    return False, 1
a, b = func()
print(a)
print(b)


4.2带有返回值的函数
# 单个返回值
a = func()
print(a)

def func():
    a = 1 + 1
    return 65
# 调用运行函数代码后，输出return数值，不是里面计算内容
# 无论内容，只管return什么就是什么
print(func())


5.函数参数（单参数）
形参:    一个字符代替的具体数值；
给什么数值到形参，形参就是什么(变量)
    a = 1 => a:形参， 1；实参

格式：
def 函数名(形参):
    代码块

函数名(实参)

例：
def b(name):                    #定义函数
    print(f"我是{name}")

b("kk")                         #调用函数
b("jj")
print(b("kk")) # 打印"kk"的返回值


6.多参数
     实参个数一定等同于形参个数
格式：
def 函数名(形参1, 形参2, 形参3):     #定义形参函数
    代码块

函数名(实参1, 实参2, 实参3)          #调用实参函数

例：
def g(name1, name2, name3):
    print(f"我是{name1, name2, name3}")

g(3, True, "kk")


7.不定长参数（重点，难点）：
   当不确定传入实参有多少，就设置不定长参数
用   形参  去决定多少个   实参           X
由  实参  去确定   形参有多少个         √

7.1  不定长参数1（元组）
   *代表元组类型，   args:元组名
   *只是一个定义标识的作用,非名字成分
格式：
def 函数名(*元组名):
# 内容为元组的用法
函数名()

例：
def HanShuMing(*sf):                #定义元组函数
    print(sf)                              #输出
    print(f"{sf[0]},{sf[1]}")           #取值下标
    a = (0,)                               #定义空元组，并加入函数
    sf = a + sf                           #（插入）
    print(sf)

HanShuMing(1, 2, 3, 4, 5)          #调用元组函数


7.2不定长参数2（字典）
**是字典，kwargs：字典名
格式：
def 函数名(**字典名):
    #字典方法
函数名()

例：
def ab(**zidain):
    zidain.update({"2": 2})
    zidain.setdefault("a1", None)
    print(zidain["a1"])
    zidain.update({1: 1})
    print(zidain)

三种调用方法：

 元组可在调用时省略*，但 字典 不能省略**
 这里没有打印任何的返回值(调用后的数值)
传入的数值必须是字符串类型
①
ab(**{"name": "JJ"})
②
a = {"name": "KK"}
ab(**a)
③
ab(name="LL")

结果解释：
调用ab函数时，传入的参数是{"name": "jj"}，
在函数内部会进行如下操作：
①更新参数字典，添加键值对{"2": 2}
②设置键"a1"的值为None
③打印参数字典中键"a1"的值（即None）
④更新参数字典，添加键值对{1: 1}

三种输出结果为：
None
{'name': 'jj', '2': 2, 'a1': None, 1: 1}
None
{'name': 'kk', '2': 2, 'a1': None, 1: 1}
None
{'name': 'LL', '2': 2, 'a1': None, 1: 1}





